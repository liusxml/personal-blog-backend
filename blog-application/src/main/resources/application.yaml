# 服务器配置
server:
  port: 8080
# Spring 应用配置
spring:
  profiles:
    active: dev # 激活的开发环境配置
  application:
    name: personal-blog-service # 应用名称
  devtools:
    restart:
      # 排除 db 目录下的任何变动触发重启
      exclude: "db/**"
  # 数据库数据源配置
  datasource:
    # 你的数据库驱动和URL
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/blog_db?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
    username: root          # [请修改] 您的数据库用户名
    password: s3cr3t_r00t_p@ssw0rd # [请修改] 您的数据库密码
    # 指定连接池类型（虽然默认就是HikariCP，但显式指定更清晰）
    type: com.zaxxer.hikari.HikariDataSource
    # HikariCP 的核心配置
    hikari:
      # 连接池中允许的最大连接数。默认为10。
      # 这是最重要的参数，需要根据你的业务并发量和数据库承载能力来调整。
      maximum-pool-size: 20
      # 连接池中维护的最小空闲连接数。默认为 maximum-pool-size 的值。
      # 建议设置为与 maximum-pool-size 相同的值，以获得最佳性能和对峰值负载的响应能力。
      minimum-idle: 20
      # 从连接池获取连接的超时时间。默认为30秒。
      # 如果在30秒内无法获取到连接（比如连接池已满），则会抛出异常。
      connection-timeout: 30000
      # 一个连接在池中允许的最长空闲时间。默认为10分钟。
      # 空闲时间超过该值的连接将被释放。
      idle-timeout: 600000
      # 一个连接在池中最长的生命周期。默认为30分钟。
      # 建议设置一个比数据库连接超时参数（如MySQL的wait_timeout）短的值。
      max-lifetime: 1800000
      # 用于测试连接是否有效的查询语句。
      # 如果驱动支持JDBC4，建议不配置此项，HikariCP会自动处理。
      # connection-test-query: SELECT 1
logging:
  level:
    root: INFO # 全局默认日志级别
    com.blog: INFO # 仅 com.blog 包下的日志级别为 DEBUG
    com.baomidou.mybatisplus.extension.ddl: INFO # Mybatis-Plus DDL 日志级别
    org.springframework.web: INFO # Spring Web 模块的日志级别
mybatis-plus:
  # Mapper.xml 文件的位置。
  # classpath*: 会扫描所有 JAR 包和类路径。
  # /mapper/**/*.xml: 匹配 mapper 目录及其所有子目录下的所有 .xml 文件。
  mapper-locations: classpath*:/mapper/**/*.xml
  # 实体类（POJO）所在的包路径。
  # 配置后，在 Mapper.xml 中使用 resultType 或 parameterType 时，可以直接写类名，而无需写完整的包名。
  type-aliases-package: com.blog.**.entity # 请根据您的项目结构调整，** 表示匹配所有模块
  # 全局配置
  global-config:
    # 关闭启动时 MyBatis-Plus 的 Banner 日志，保持控制台清洁
    banner: false
    # 数据库相关配置
    db-config:
      # 主键生成策略。AUTO 表示使用数据库的自增策略。
      id-type: auto
      # 逻辑删除配置（极其重要，强烈推荐）
      # 全局指定逻辑删除的实体字段名。
      logic-delete-field: isDeleted # 假设你的 BaseEntity 中有 @TableLogic private Integer isDeleted; 字段
      # 逻辑删除时，数据库中该字段的值。
      logic-delete-value: 1
      # 未删除时，数据库中该字段的值。
      logic-not-delete-value: 0
  # MyBatis 原生配置
  configuration:
    # 开启数据库字段下划线到 Java 实体驼峰命名的自动映射。
    # 例如：数据库字段 last_name 会自动映射到实体属性 lastName。
    map-underscore-to-camel-case: true
    # 当查询结果为 null 时，MyBatis 是否调用 setter 或 map 的 put 方法。
    # `NULL` 表示会调用，这可以确保所有字段都被初始化，避免了基本类型（如 int）的默认值问题。
    call-setters-on-nulls: true
    # 指定 MyBatis 使用的日志实现，与 Spring Boot 的日志框架集成。
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl